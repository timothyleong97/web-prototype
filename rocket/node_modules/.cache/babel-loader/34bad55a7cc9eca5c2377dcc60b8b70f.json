{"ast":null,"code":"'use strict';\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar Client = require('./client');\n\nvar defaults = require('./defaults');\n\nvar Connection = require('./connection');\n\nvar Pool = require('pg-pool');\n\nconst poolFactory = Client => {\n  return class BoundPool extends Pool {\n    constructor(options) {\n      super(options, Client);\n    }\n\n  };\n};\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults;\n  this.Client = clientConstructor;\n  this.Query = this.Client.Query;\n  this.Pool = poolFactory(this.Client);\n  this._pools = [];\n  this.Connection = Connection;\n  this.types = require('pg-types');\n};\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'));\n} else {\n  module.exports = new PG(Client); // lazy require native module...the native module may not have installed\n\n  Object.defineProperty(module.exports, 'native', {\n    configurable: true,\n    enumerable: false,\n\n    get() {\n      var native = null;\n\n      try {\n        native = new PG(require('./native'));\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err;\n        }\n        /* eslint-disable no-console */\n\n\n        console.error(err.message);\n        /* eslint-enable no-console */\n      } // overwrite module.exports.native so that getter is never called again\n\n\n      Object.defineProperty(module.exports, 'native', {\n        value: native\n      });\n      return native;\n    }\n\n  });\n}","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/web-prototype/rocket/src/backend/node_modules/pg/lib/index.js"],"names":["Client","require","defaults","Connection","Pool","poolFactory","BoundPool","constructor","options","PG","clientConstructor","Query","_pools","types","process","env","NODE_PG_FORCE_NATIVE","module","exports","Object","defineProperty","configurable","enumerable","get","native","err","code","console","error","message","value"],"mappings":"AAAA;AACA;;;;;;;;AAQA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB;;AAEA,MAAMI,WAAW,GAAIL,MAAD,IAAY;AAC9B,SAAO,MAAMM,SAAN,SAAwBF,IAAxB,CAA6B;AAClCG,IAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,YAAMA,OAAN,EAAeR,MAAf;AACD;;AAHiC,GAApC;AAKD,CAND;;AAQA,IAAIS,EAAE,GAAG,UAAUC,iBAAV,EAA6B;AACpC,OAAKR,QAAL,GAAgBA,QAAhB;AACA,OAAKF,MAAL,GAAcU,iBAAd;AACA,OAAKC,KAAL,GAAa,KAAKX,MAAL,CAAYW,KAAzB;AACA,OAAKP,IAAL,GAAYC,WAAW,CAAC,KAAKL,MAAN,CAAvB;AACA,OAAKY,MAAL,GAAc,EAAd;AACA,OAAKT,UAAL,GAAkBA,UAAlB;AACA,OAAKU,KAAL,GAAaZ,OAAO,CAAC,UAAD,CAApB;AACD,CARD;;AAUA,IAAI,OAAOa,OAAO,CAACC,GAAR,CAAYC,oBAAnB,KAA4C,WAAhD,EAA6D;AAC3DC,EAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIT,EAAJ,CAAOR,OAAO,CAAC,UAAD,CAAd,CAAjB;AACD,CAFD,MAEO;AACLgB,EAAAA,MAAM,CAACC,OAAP,GAAiB,IAAIT,EAAJ,CAAOT,MAAP,CAAjB,CADK,CAGL;;AACAmB,EAAAA,MAAM,CAACC,cAAP,CAAsBH,MAAM,CAACC,OAA7B,EAAsC,QAAtC,EAAgD;AAC9CG,IAAAA,YAAY,EAAE,IADgC;AAE9CC,IAAAA,UAAU,EAAE,KAFkC;;AAG9CC,IAAAA,GAAG,GAAG;AACJ,UAAIC,MAAM,GAAG,IAAb;;AACA,UAAI;AACFA,QAAAA,MAAM,GAAG,IAAIf,EAAJ,CAAOR,OAAO,CAAC,UAAD,CAAd,CAAT;AACD,OAFD,CAEE,OAAOwB,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,kBAAjB,EAAqC;AACnC,gBAAMD,GAAN;AACD;AACD;;;AACAE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAG,CAACI,OAAlB;AACA;AACD,OAXG,CAaJ;;;AACAV,MAAAA,MAAM,CAACC,cAAP,CAAsBH,MAAM,CAACC,OAA7B,EAAsC,QAAtC,EAAgD;AAC9CY,QAAAA,KAAK,EAAEN;AADuC,OAAhD;AAIA,aAAOA,MAAP;AACD;;AAtB6C,GAAhD;AAwBD","sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar Client = require('./client')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\nvar Pool = require('pg-pool')\n\nconst poolFactory = (Client) => {\n  return class BoundPool extends Pool {\n    constructor (options) {\n      super(options, Client)\n    }\n  }\n}\n\nvar PG = function (clientConstructor) {\n  this.defaults = defaults\n  this.Client = clientConstructor\n  this.Query = this.Client.Query\n  this.Pool = poolFactory(this.Client)\n  this._pools = []\n  this.Connection = Connection\n  this.types = require('pg-types')\n}\n\nif (typeof process.env.NODE_PG_FORCE_NATIVE !== 'undefined') {\n  module.exports = new PG(require('./native'))\n} else {\n  module.exports = new PG(Client)\n\n  // lazy require native module...the native module may not have installed\n  Object.defineProperty(module.exports, 'native', {\n    configurable: true,\n    enumerable: false,\n    get() {\n      var native = null\n      try {\n        native = new PG(require('./native'))\n      } catch (err) {\n        if (err.code !== 'MODULE_NOT_FOUND') {\n          throw err\n        }\n        /* eslint-disable no-console */\n        console.error(err.message)\n        /* eslint-enable no-console */\n      }\n\n      // overwrite module.exports.native so that getter is never called again\n      Object.defineProperty(module.exports, 'native', {\n        value: native\n      })\n\n      return native\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}