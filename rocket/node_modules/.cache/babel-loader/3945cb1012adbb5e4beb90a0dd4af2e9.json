{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst emptyBuffer = Buffer.allocUnsafe(0);\n\nclass BufferReader {\n  constructor(offset = 0) {\n    this.offset = offset;\n    this.buffer = emptyBuffer; // TODO(bmc): support non-utf8 encoding?\n\n    this.encoding = 'utf-8';\n  }\n\n  setBuffer(offset, buffer) {\n    this.offset = offset;\n    this.buffer = buffer;\n  }\n\n  int16() {\n    const result = this.buffer.readInt16BE(this.offset);\n    this.offset += 2;\n    return result;\n  }\n\n  byte() {\n    const result = this.buffer[this.offset];\n    this.offset++;\n    return result;\n  }\n\n  int32() {\n    const result = this.buffer.readInt32BE(this.offset);\n    this.offset += 4;\n    return result;\n  }\n\n  string(length) {\n    const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\n    this.offset += length;\n    return result;\n  }\n\n  cstring() {\n    const start = this.offset;\n    let end = start;\n\n    while (this.buffer[end++] !== 0) {}\n\n    ;\n    this.offset = end;\n    return this.buffer.toString(this.encoding, start, end - 1);\n  }\n\n  bytes(length) {\n    const result = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return result;\n  }\n\n}\n\nexports.BufferReader = BufferReader;","map":{"version":3,"sources":["../src/buffer-reader.ts"],"names":[],"mappings":";;;;;AAAA,MAAM,WAAW,GAAG,MAAM,CAAC,WAAP,CAAmB,CAAnB,CAApB;;AAEA,MAAa,YAAb,CAAyB;AAMvB,EAAA,WAAA,CAAoB,MAAA,GAAiB,CAArC,EAAsC;AAAlB,SAAA,MAAA,GAAA,MAAA;AALZ,SAAA,MAAA,GAAiB,WAAjB,CAK8B,CAHtC;;AACQ,SAAA,QAAA,GAAmB,OAAnB;AAGP;;AAEM,EAAA,SAAS,CAAC,MAAD,EAAiB,MAAjB,EAA+B;AAC7C,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;AAEM,EAAA,KAAK,GAAA;AACV,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,MAA7B,CAAf;AACA,SAAK,MAAL,IAAe,CAAf;AACA,WAAO,MAAP;AACD;;AAEM,EAAA,IAAI,GAAA;AACT,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,KAAK,MAAjB,CAAf;AACA,SAAK,MAAL;AACA,WAAO,MAAP;AACD;;AAEM,EAAA,KAAK,GAAA;AACV,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,WAAZ,CAAwB,KAAK,MAA7B,CAAf;AACA,SAAK,MAAL,IAAe,CAAf;AACA,WAAO,MAAP;AACD;;AAEM,EAAA,MAAM,CAAC,MAAD,EAAe;AAC1B,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAAK,QAA1B,EAAoC,KAAK,MAAzC,EAAiD,KAAK,MAAL,GAAc,MAA/D,CAAf;AACA,SAAK,MAAL,IAAe,MAAf;AACA,WAAO,MAAP;AACD;;AAEM,EAAA,OAAO,GAAA;AACZ,UAAM,KAAK,GAAG,KAAK,MAAnB;AACA,QAAI,GAAG,GAAG,KAAV;;AACA,WAAM,KAAK,MAAL,CAAY,GAAG,EAAf,MAAuB,CAA7B,EAAgC,CAAG;;AAAA;AACnC,SAAK,MAAL,GAAc,GAAd;AACA,WAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,KAAK,QAA1B,EAAoC,KAApC,EAA2C,GAAG,GAAG,CAAjD,CAAP;AACD;;AAEM,EAAA,KAAK,CAAC,MAAD,EAAe;AACzB,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,MAAvB,EAA+B,KAAK,MAAL,GAAc,MAA7C,CAAf;AACA,SAAK,MAAL,IAAe,MAAf;AACA,WAAO,MAAP;AACD;;AAlDsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass BufferReader {\n    constructor(offset = 0) {\n        this.offset = offset;\n        this.buffer = emptyBuffer;\n        // TODO(bmc): support non-utf8 encoding?\n        this.encoding = 'utf-8';\n    }\n    setBuffer(offset, buffer) {\n        this.offset = offset;\n        this.buffer = buffer;\n    }\n    int16() {\n        const result = this.buffer.readInt16BE(this.offset);\n        this.offset += 2;\n        return result;\n    }\n    byte() {\n        const result = this.buffer[this.offset];\n        this.offset++;\n        return result;\n    }\n    int32() {\n        const result = this.buffer.readInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    string(length) {\n        const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n    cstring() {\n        const start = this.offset;\n        let end = start;\n        while (this.buffer[end++] !== 0) { }\n        ;\n        this.offset = end;\n        return this.buffer.toString(this.encoding, start, end - 1);\n    }\n    bytes(length) {\n        const result = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n}\nexports.BufferReader = BufferReader;\n//# sourceMappingURL=buffer-reader.js.map"]},"metadata":{},"sourceType":"module"}