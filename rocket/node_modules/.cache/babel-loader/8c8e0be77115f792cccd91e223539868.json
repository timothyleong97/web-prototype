{"ast":null,"code":"\"use strict\"; //binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass Writer {\n  constructor(size = 256) {\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.alloc(size);\n  }\n\n  ensure(size) {\n    var remaining = this.buffer.length - this.offset;\n\n    if (remaining < size) {\n      var oldBuffer = this.buffer; // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n      this.buffer = Buffer.alloc(newSize);\n      oldBuffer.copy(this.buffer);\n    }\n  }\n\n  addInt32(num) {\n    this.ensure(4);\n    this.buffer[this.offset++] = num >>> 24 & 0xFF;\n    this.buffer[this.offset++] = num >>> 16 & 0xFF;\n    this.buffer[this.offset++] = num >>> 8 & 0xFF;\n    this.buffer[this.offset++] = num >>> 0 & 0xFF;\n    return this;\n  }\n\n  addInt16(num) {\n    this.ensure(2);\n    this.buffer[this.offset++] = num >>> 8 & 0xFF;\n    this.buffer[this.offset++] = num >>> 0 & 0xFF;\n    return this;\n  }\n\n  addCString(string) {\n    if (!string) {\n      this.ensure(1);\n    } else {\n      var len = Buffer.byteLength(string);\n      this.ensure(len + 1); // +1 for null terminator\n\n      this.buffer.write(string, this.offset, 'utf-8');\n      this.offset += len;\n    }\n\n    this.buffer[this.offset++] = 0; // null terminator\n\n    return this;\n  }\n\n  addString(string = \"\") {\n    var len = Buffer.byteLength(string);\n    this.ensure(len);\n    this.buffer.write(string, this.offset);\n    this.offset += len;\n    return this;\n  }\n\n  add(otherBuffer) {\n    this.ensure(otherBuffer.length);\n    otherBuffer.copy(this.buffer, this.offset);\n    this.offset += otherBuffer.length;\n    return this;\n  }\n\n  join(code) {\n    if (code) {\n      this.buffer[this.headerPosition] = code; //length is everything in this packet minus the code\n\n      const length = this.offset - (this.headerPosition + 1);\n      this.buffer.writeInt32BE(length, this.headerPosition + 1);\n    }\n\n    return this.buffer.slice(code ? 0 : 5, this.offset);\n  }\n\n  flush(code) {\n    var result = this.join(code);\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(this.size);\n    return result;\n  }\n\n}\n\nexports.Writer = Writer;","map":{"version":3,"sources":["../src/buffer-writer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Writer {\n    constructor(size = 256) {\n        this.size = size;\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.alloc(size);\n    }\n    ensure(size) {\n        var remaining = this.buffer.length - this.offset;\n        if (remaining < size) {\n            var oldBuffer = this.buffer;\n            // exponential growth factor of around ~ 1.5\n            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n            var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n            this.buffer = Buffer.alloc(newSize);\n            oldBuffer.copy(this.buffer);\n        }\n    }\n    addInt32(num) {\n        this.ensure(4);\n        this.buffer[this.offset++] = (num >>> 24 & 0xFF);\n        this.buffer[this.offset++] = (num >>> 16 & 0xFF);\n        this.buffer[this.offset++] = (num >>> 8 & 0xFF);\n        this.buffer[this.offset++] = (num >>> 0 & 0xFF);\n        return this;\n    }\n    addInt16(num) {\n        this.ensure(2);\n        this.buffer[this.offset++] = (num >>> 8 & 0xFF);\n        this.buffer[this.offset++] = (num >>> 0 & 0xFF);\n        return this;\n    }\n    addCString(string) {\n        if (!string) {\n            this.ensure(1);\n        }\n        else {\n            var len = Buffer.byteLength(string);\n            this.ensure(len + 1); // +1 for null terminator\n            this.buffer.write(string, this.offset, 'utf-8');\n            this.offset += len;\n        }\n        this.buffer[this.offset++] = 0; // null terminator\n        return this;\n    }\n    addString(string = \"\") {\n        var len = Buffer.byteLength(string);\n        this.ensure(len);\n        this.buffer.write(string, this.offset);\n        this.offset += len;\n        return this;\n    }\n    add(otherBuffer) {\n        this.ensure(otherBuffer.length);\n        otherBuffer.copy(this.buffer, this.offset);\n        this.offset += otherBuffer.length;\n        return this;\n    }\n    join(code) {\n        if (code) {\n            this.buffer[this.headerPosition] = code;\n            //length is everything in this packet minus the code\n            const length = this.offset - (this.headerPosition + 1);\n            this.buffer.writeInt32BE(length, this.headerPosition + 1);\n        }\n        return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n    flush(code) {\n        var result = this.join(code);\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(this.size);\n        return result;\n    }\n}\nexports.Writer = Writer;\n//# sourceMappingURL=buffer-writer.js.map"]},"metadata":{},"sourceType":"module"}